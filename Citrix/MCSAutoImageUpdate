######################################################                                 
$adminAddress = 'FQDN of Admin address'              #
$xdcontroller = 'FQDN of XD if different'            #
$date = (Get-Date).ToString()                        #
$StorageTarget = 'VMM target'                        #
$HyperVisorHost = 'Cluster name'                     #
$MachineCatalogNames = @()                           #       
$masterImage = 'VM name'                             #
$NewSnapShotName = $masterImage + " - " + $date      #
$smtpserver = "SMTP server"                          #
$MasterImageHost = "Host of GI"                      #
$VMCleanUpThreshold = 5                              #
$ToEmail = "email address"                           #
$FromAddress = "If anon is allowed"                  #
######################################################


$hostingUnit = Get-ChildItem -AdminAddress $adminAddress "XDHyp:\HostingUnits" | Select-Object PSChildName, PsPath
$hostConnection = Get-ChildItem -AdminAddress $adminAddress "XDHyp:\Connections" 


$brokerHypConnection = Get-BrokerHypervisorConnection -AdminAddress $adminAddress -HypHypervisorConnectionUid $hostConnection.HypervisorConnectionUid

$VM = Get-ChildItem -AdminAddress $adminAddress "XDHyp:\HostingUnits" 


## Get the master VM image from the same storage resource we're going to deploy to. Could pull this from another storage resource available to the host
## Write-Verbose "Getting the snapshot details for the catalog: $machineCatalogName"
$VM = Get-ChildItem -AdminAddress $adminAddress "XDHyp:\HostingUnits\$StorageTarget"  | Where-Object { $_.ObjectType -eq "VM" -and $_.Name -like $masterImage }
## Generate new snapshot of the $masterImage VM
New-HypVMSnapshot -LiteralPath $vm.FullPath -SnapshotName "$NewSnapShotName" -SnapshotDescription '"Snapshot generated by automatic provisioning on" + $date'
## Check for checkpoint creation status.
$checkpointValidation = Get-SCVirtualMachine $masterImage
if($checkpointValidation.Status -eq 'checkpointFailed')
    {
        Repair-SCVirtualMachine -VM $checkpointValidation -Dismiss
        if((Get-SCVirtualMachine -VMHost $masterImage).Status -eq 'CheckPointFailed')
            {
                Send-MailMessage -To $ToEmail -From $FromAddress -SmtpServer $smtpserver -Subject "Something has gone wrong created the new Checkpoint, Please addres this issue"
                Exit
            }
    }
## Get the snapshot details. This code will grab a specific snapshot, although you could grab the last in the list assuming it's the latest.
## Iterate through list of snapshots (if any) to grab latest snapshot point just created.
$VMSnapshots = Get-ChildItem -AdminAddress $adminAddress $VM.FullPath -Recurse -Include *.snapshot
## Get the last one in the array
$VMSnapSHotCount = $VMSnapshots.Count - 1
## Set Target snapshot
$TargetSnapshot = $VMSnapshots[$VMSnapSHotCount]



## Publish the image update to the machine catalog

Foreach($MachineCatalogName in $MachineCatalogNames)
    {
        $PubTask = Publish-ProvMasterVmImage -AdminAddress $adminAddress -MasterImageVM $TargetSnapshot.FullPath -ProvisioningSchemeName $machineCatalogName -RunAsynchronously
        $provTask = Get-ProvTask -AdminAddress $adminAddress -TaskId $PubTask
        while($provTask.Active -eq $True)
            {
                Start-Sleep -Seconds 15
                $provTask = Get-ProvTask -AdminAddress $adminAddress -TaskId $PubTask

            }
            Send-MailMessage -To $ToEmail -From $FromAddress -SmtpServer $smtpserver -Subject "Citrix Provisioning has finshed for Catalog: + $MachineCatalogName"           
    }


## Track progress of the image update while testing functionality

    #Write-Verbose "Tracking progress of the machine creation task."
    #$totalPercent = 0
    #While ( $provTask.Active -eq $True ) {
    #    Try { $totalPercent = If ( $provTask.TaskProgress ) { $provTask.TaskProgress } Else {0} } Catch { }
    #
        # Write-Progress -Activity "Provisioning image update" -Status "$totalPercent% Complete:" -percentcomplete $totalPercent
            #Sleep 15
                #$provTask = Get-ProvTask -AdminAddress $adminAddress -TaskId $PubTask

            #}

if($VMSnapSHotCount -gt $VMCleanUpThreshold)
    {
        $totalSnaps = (Get-VMSnapshot -VMName $masterImage -ComputerName $MasterImageHost).count
        while($totalSnaps -gt $VMCleanUpThreshold)
            {
                $totalSnaps = Get-VMSnapshot -VMName $masterImage -ComputerName $MasterImageHost
                $totalSnaps[0] | Remove-VMSnapshot
                $totalSnaps = (Get-VMSnapshot -VMName $masterImage -ComputerName $MasterImageHost).count
            }
          
        
    }

#Get-ProvScheme -ProvisioningSchemeUid (Get-BrokerCatalog -Name "").ProvisioningSchemeId # | Select MasterImageVM
